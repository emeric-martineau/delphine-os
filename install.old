#!/bin/bash

# DelphineOS installation script
#
# FIXME: if disk image already exists, we don't need to :
#	 - Copy the boot sector
#	 - Create directories, ...


FPC_VERSION="1.0.10"    # Current FPC version
NASM_VERSION="0.98.38"  # Current NASM version
VERSION="0.0.1"         # Current DelphineOS version
NOT_FOUND="\033[31;1mnot found\033[0m"

OS=`uname -a|cut -d" " -f1`


compile_kernel()
{

   echo -en "Check if the FPC is present...\t\t\t"

   PPC=$(ppc386 -iV 2> /dev/null)

   if [ ! $? -eq 1 ]; then
        echo -e $NOT_FOUND
        echo;echo;
        echo "Please install FPC $FPC_VERSION and try again  :-)"
        echo;echo;
        exit;
   fi

   echo "OK (version $PPC)"

   if [ $PPC != $FPC_VERSION ]; then
        echo -e "\033[31;1mWARNING: Latest version of the FPC is version $FPC_VERSION\033[0m"
   fi


   echo -en "Check FPC configuration...\t\t\t"
   echo "begin" > test.pp
   echo "end." >> test.pp
   PPC=$(ppc386 test.pp 2> /dev/null)

   if [ ! $? -eq 0 ]; then
        echo;echo;
        echo "FPC isn't correctly configured"
        echo;echo;
        rm -f test*
        exit;
   fi

   rm -f test*

   echo "OK"

   echo -en "Check if nasm is present...\t\t\t"

   nasm -v 2>&1 > /dev/null

   if [ ! $? -eq 0 ]; then
        echo -e $NOT_FOUND
        echo;
        echo -e "\033[31;1mWarning: Please install NASM $NASM_VERSION or newer\033[0m"
        echo;echo;
        exit;
   fi

   echo "OK"

   echo -en "Check if gcc is present...\t\t\t"

   gcc -v 2> /dev/null

   if [ ! $? -eq 0 ]; then
        echo -e $NOT_FOUND
        echo;
        echo -e "\033[31;1mWarning: Please install gcc\033[0m"
        echo;echo;
        exit;
   fi

   echo "OK"

   echo -en "Compiling DelphineOS kernel...\t\t\t"

	if [ "$OS" == "Linux" ]; then
   	make > kernel.log 2> kernel.log
	fi

	if [ "$OS" == "FreeBSD" ]; then
   	gmake > kernel.log 2> kernel.log
	fi

   if [ ! $? -eq 0 ]; then
	echo -e "\033[31;1mCompilation error.\n\nPlease see kernel.log\033[0m"
	echo;
	return;
   fi

   if [ ! -e mkboot ]; then
        gcc -o mkboot mkboot.c
   fi
   
   if [ -f $1 ]; then
		if [ "$OS" == "Linux" ]; then
      	losetup /dev/loop1 $1
			mount -t ext2 /dev/loop1 wxy/ -o loop 2> /dev/null > /dev/null
		else
			if [ "$OS" == "FreeBSD" ]; then
				MD_DEVICE=`mdconfig -a -t vnode -f $1`
				mount_ext2fs /dev/$MD_DEVICE wxy/
			fi
		fi

      if [ ! $? -eq 0 ]; then
           echo;
			  if [ "$OS" == "Linux" ]; then
           		echo -e "\033[31;1m\nCannot mount $1. Check if loopback is activated in your kernel\033[0m"
					losetup -d /dev/loop1
			  fi
			  if [ "$OS" == "FreeBSD" ]; then
			  		echo -e "\033[31;1m\nCannot mount $1. Check if EXT2FS is in your kernel\033[0m"
					mdconfig -d -u $MD_DEVICE
			  fi
	   echo;
	   rm -rf wxy/
      exit;
      fi
   else
      mount -t ext2 $1 wxy/ 2> /dev/null > /dev/null
      if [ ! $? -eq 0 ]; then
           echo;
	   echo -e "\033[31;1m\nCannot mount $1. Check if a disk is present and ext2 formatted\033[0m"
	   echo;
	   rm -rf wxy/
	   exit;
      fi
   fi

   echo "OK"

   echo -en "Copying kernel to $1...\t"

   cp ./src/kernel/kernel wxy/

   if [ -f $1 ]; then
		if [ "$OS" == "Linux" ]; then
			./mkboot /dev/loop1 wxy/kernel
		fi
		if [ "$OS" == "FreeBSD" ]; then
			./mkboot bochs/delphineOS_ext2.img wxy/kernel
		fi
   else
        ./mkboot $1 wxy/kernel
   fi

   echo "OK"

   echo -en 'Compiling boot sector file...\t\t\t'
   nasm ./src/boot/boot.S
   echo "OK"

   #Copying files to mount point
   
   #FIXME: test if files already exist before copying them

	if [ ! -e base/dev/null ]; then
#		mknod wxy/dev/tty  c 5 0 2> /dev/null
		mknod base/dev/tty1 c 4 1 2> /dev/null
		mknod base/dev/tty2 c 4 2 2> /dev/null
		mknod base/dev/tty3 c 4 3 2> /dev/null
		mknod base/dev/tty4 c 4 4 2> /dev/null
		mknod base/dev/tty5 c 4 5 2> /dev/null
		mknod base/dev/tty6 c 4 6 2> /dev/null
		mknod base/dev/tty7 c 4 7 2> /dev/null
		mknod base/dev/tty8 c 4 8 2> /dev/null
		mknod base/dev/null c 1 0 2> /dev/null
		mknod base/dev/zero c 6 0 2> /dev/null
		chmod 666 base/dev/*
	fi

   cp -R base/*  wxy/
   chmod 777 wxy/tmp
	umount wxy/

   if [ -f $1 ]; then
		if [ "$OS" == "Linux" ]; then
			dd if=src/boot/boot of=/dev/loop1 2> /dev/null
			losetup -d /dev/loop1
		fi
		if [ "$OS" == "FreeBSD" ]; then
			dd if=src/boot/boot of=/dev/$MD_DEVICE 2> /dev/null
			mdconfig -d -u $MD_DEVICE
		fi
		chmod a+rw $1
   else
		dd if=./src/boot/boot of=$1 2> /dev/null
   fi

   rm -rf wxy

}


# Beginning of the DelphineOS install script

clear;
echo; echo;

echo -e "\033[32;1mDelphineOS $VERSION Installation:\033[0m"

if [ $(whoami) != "root" ]; then
	echo;echo;
	echo "Only root can execute this script"
	echo;echo;
	exit;  
fi

mkdir wxy 2> /dev/null

echo;
echo "Where do you want to install DelphineOS:"
echo;
echo -e "Edit \033[32;1msrc/include/kernel/config.inc\033[0m for kernel configuration";
echo;
echo "	1 - On a Bochs a disk image"
echo "	2 - On a floppy disk (/dev/fd0)"
echo "	3 - On a hd partition"
echo;
echo -n "Please, enter your choice [1]: "
read REP

if [ "$REP" == "" ]; then
     REP="1"
fi

case $REP in

	1) echo;
		echo -e "\033[32;1mCreating Bochs environment:\033[0m"
		echo;
		echo -en "Check if Bochs is present...\t\t\t"
		bochs --help 2> /dev/null
		if [ ! $? -eq 0 ]; then
			echo -e $NOT_FOUND
			echo;
			echo -e "\033[31;1mWarning: Please install Bochs 2.0.2 or newer\033[0m"
			echo;echo;
			exit;
		fi

		echo "OK"

		if [ ! -e ./bochs/delphineOS.img ]; then
			echo -en "Creating HDD image (20Mb)...\t\t\t"
			dd if=/dev/zero of=bochs/delphineOS_ext2.img bs=512 count=40257 2> /dev/null

			echo "OK"
			echo -en "Formatting HDD image (ext2)...\t\t\t"
			mke2fs -F -q bochs/delphineOS_ext2.img

			echo "OK"
		fi

		compile_kernel bochs/delphineOS_ext2.img

		cp ./src/boot/mbr partoche
		echo -en "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01" >> partoche
		echo -en "\x01\x00\x83\x0F\x3F\x27\x3F\x00\x00\x00\x41\x9D\x00\x00\x00\x00" >> partoche
		echo -en "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" >> partoche
		echo -en "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" >> partoche
		echo -en "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA" >> partoche
		
		dd if=/dev/zero of=partoche bs=512 oseek=1 count=62 2> /dev/null
		cat bochs/delphineOS_ext2.img >> partoche
		cp partoche bochs/delphineOS.img
		chmod 666 bochs/delphineOS.img
		rm partoche

		echo;
		echo -e "\033[32;1mUse this for bochs:\033[0m"
		echo -e "ata0-master: type=disk, mode=flat, path="bochs/delphineOS.img", cylinders=40,\nheads=16, spt=63, model="Bochs HD""
		;;


	2) echo;
		echo -e "\033[32;1mCreating a bootable floppy:\033[0m"
		echo;
		compile_kernel /dev/fd0
		echo;
		echo "You can now reboot with /dev/fd0. It should be OK  :-)"
		;;


	3) echo;
		echo -n "Partition (ex: /dev/hda3): "
		read PART
		echo; echo -en "\033[31;1mWARNING: \033[0m"
		echo -n "Are you sure you want to install DelphineOS on $PART [y/n]: "
		read REP2
		echo;

		if [ "$REP2" != "y" ]; then
	   	echo "Bye"; echo;
	   	exit;
		fi

		compile_kernel $PART
		echo;
		echo "Reboot and try DelphineOS   :-)"
		;;


	*) echo -e "\n\033[31;1mIs your brain dead ???   :-)\033[0m";

esac


# Now, creating script to compile programs for DelphineOS using gcc
#
# FIXME: When you can't compile a program because of unresolved symbols, try to delete the GCC
#        flags "-nostdlib" and "-nodefaultlibs"

   if [ ! -e flagger ]; then
        echo
        echo -n "Creating 'flagger' script...   "

	echo "#!/bin/bash" > flagger
	echo "#delphineOS" >> flagger
	echo "" >> flagger
	echo "TEST=\`echo \$@ |grep -e '-c '\`" >> flagger
	echo "" >> flagger
	echo "if [ ! -n \"\$TEST\" ]; then" >> flagger
	echo -n "gcc \$@ -nostdinc -nostartfiles -nostdlib -I$PWD/src/include -static " >> flagger
	echo -n "-Xlinker $PWD/lib/start.o -Xlinker $PWD/lib/environ.o -Xlinker $PWD/lib/dietlibc.a " >> flagger
	echo "-Xlinker -T -Xlinker $PWD/lib/c_linkfile -Xlinker --strip-all" >> flagger
	echo "else" >> flagger
	echo "gcc \$@ -nostdinc -I$PWD/src/include" >> flagger

	echo "fi" >> flagger
	chmod +x flagger
        echo "OK"
   fi

   echo
   if [ ! -e /usr/bin/flagger ]; then
	 echo "Copying 'flagger' to /usr/bin"
	 cp flagger /usr/bin/flagger
   else
        if [ -n "$(grep '#delphineOS' /usr/bin/flagger)" ]; then
	     echo "Copying 'flagger' to /usr/bin"
	     cp flagger /usr/bin/flagger
	else
             echo "You can move 'flagger' to /usr/bin to be able to use it easily"
	fi
   fi

echo;
echo -e "\033[32;1mPlease\033[0m, send comments, questions, bug reports to g_cavelier@yahoo.fr. Thank you."
echo;
