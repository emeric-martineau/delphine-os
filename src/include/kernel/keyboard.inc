
const

   SC_LIM = 89;

   {*
    * Translation of escaped scancodes to keycodes.
    * This is now user-settable.
    * The keycodes 1-88,96-111,119 are fairly standard, and
    * should probably not be changed - changing might confuse X.
    * X also interprets scancode 0x5d (KEY_Begin).
    *
    * For 1-88 keycode equals scancode.
    *}
   E0_KPENTER = 96;
   E0_RCTRL   = 97;
   E0_KPSLASH = 98;
   E0_PRSCR   = 99;
   E0_RALT    = 100;
   E0_BREAK   = 101;  {* (control-pause) *}
   E0_HOME    = 102;
   E0_UP      = 103;
   E0_PGUP    = 104;
   E0_LEFT    = 105;
   E0_RIGHT   = 106;
   E0_END     = 107;
   E0_DOWN    = 108;
   E0_PGDN    = 109;
   E0_INS     = 110;
   E0_DEL     = 111;

   E1_PAUSE   = 119;

   {* BTC *}
   E0_MACRO   = 112;
   {* LK450 *}
   E0_F13     = 113;
   E0_F14     = 114;
   E0_HELP    = 115;
   E0_DO      = 116;
   E0_F17     = 117;
   E0_KPMINPLUS = 118;

   {*
    * My OmniKey generates e0 4c for  the "OMNI" key and the
    * right alt key does nada. [kkoller@nyx10.cs.du.edu]
    *}
   E0_OK	= 124;

   {*
    * New microsoft keyboard is rumoured to have
    * e0 5b (left window button), e0 5c (right window button),
    * e0 5d (menu button). [or: LBANNER, RBANNER, RMENU]
    * [or: Windows_L, Windows_R, TaskMan]
    *}
   E0_MSLW	= 125;
   E0_MSRW	= 126;
   E0_MSTM	= 127;


   e0_keys : array[0..127] of byte =
             ( 0, 0, 0, 0, 0, 0, 0, 0, 		          	{ 0x00-0x07 }
	       0, 0, 0, 0, 0, 0, 0, 0, 		       	  	{ 0x08-0x0f }
	       0, 0, 0, 0, 0, 0, 0, 0, 		       	   	{ 0x10-0x17 }
	       0, 0, 0, 0, E0_KPENTER, E0_RCTRL, 0, 0,   	{ 0x18-0x1f }
	       0, 0, 0, 0, 0, 0, 0, 0,		       	   	{ 0x20-0x27 }
	       0, 0, 0, 0, 0, 0, 0, 0,		  		{ 0x28-0x2f }
	       0, 0, 0, 0, 0, E0_KPSLASH, 0, E0_PRSCR,   	{ 0x30-0x37 }
	       E0_RALT, 0, 0, 0, 0, E0_F13, E0_F14, E0_HELP,   	{ 0x38-0x3f }
	       E0_DO, E0_F17, 0, 0, 0, 0, E0_BREAK, E0_HOME,   	{ 0x40-0x47 }
	       E0_UP, E0_PGUP, 0, E0_LEFT, E0_OK, E0_RIGHT, E0_KPMINPLUS, E0_END, { 0x48-0x4f }
	       E0_DOWN, E0_PGDN, E0_INS, E0_DEL, 0, 0, 0, 0,   	{ 0x50-0x57 }
	       0, 0, 0, E0_MSLW, E0_MSRW, E0_MSTM, 0, 0,    	{ 0x58-0x5f }
	       0, 0, 0, 0, 0, 0, 0, 0,			   	{ 0x60-0x67 }
	       0, 0, 0, 0, 0, 0, 0, E0_MACRO,		   	{ 0x68-0x6f }
	       0, 0, 0, 0, 0, 0, 0, 0,			   	{ 0x70-0x77 }
	       0, 0, 0, 0, 0, 0, 0, 0 ); 		   	{ 0x78-0x7f }


 kbesc   =  1;
 kbenter = 28;
 kbleft  = 75;
 kbright = 77;
 kbSpace = 57;
 kbBkSpc = 14;
 kbCtrl  = 29;
 kbAlt   = 56;
 kbF1    =$3B;
 kbF2    =$3C;
 kbF3    =$3D;
 kbF4    =$3E;
 kbF5    =$3F;
 kbF6    =$40;
 kbF7    =$41;
 kbF8    =$42;
 kbF9    =$43;
 kbF10   =$44;
 kbF11   =$57;
 kbF12   =$86;

func_map : array[1..128] of function (keycode : byte ; up : boolean) : char =
   (@nop, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self,	{ 1-10 }
    @do_self, @do_self, @do_self, @do_self, @nop, @do_self, @do_self, @do_self, @do_self, @do_self,	{ 11-20 }
    @do_self, @do_self, @do_self, @do_self, @do_self, @nop, @do_self, @do_self, @do_ctrl, @do_self,	{ 21-30 }
    @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_clear, @do_self, @do_self,{ 31-40 }
    @do_self, @do_shift, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self, @do_self,{ 41-50 }
    @do_self, @do_self, @do_self, @do_shift, @do_self, @do_alt, @do_self, @do_maj, @do_func, @do_func,	{ 51-60 }
    @do_func, @do_func, @do_func, @do_func, @do_func, @do_func, @do_debug, @do_debug, @do_numlock, @nop,{ 61-70 }
    @do_num, @do_num, @do_num, @do_self, @do_num, @do_num, @do_num, @do_self, @do_num, @do_num,		{ 71-80 }
    @do_num, @do_num, @do_num, @nop, @nop, @do_self, @do_debug, @nop, @nop, @nop,			{ 81-90 }
    @nop, @nop, @nop, @nop, @nop, @do_self, @do_ctrl, @do_self, @do_magic, @do_altgr,			{ 91-100 }
    @nop, @nop, @nop, @nop, @nop, @nop, @nop, @nop, @nop, @nop,						{ 101-110 }
    @do_suppr, @nop, @nop, @nop, @nop, @nop, @nop, @nop, @nop, @nop,					{ 111-120 }
    @nop, @nop, @nop, @nop, @nop, @nop, @nop, @nop);							{ 121-128 }

{$DEFINE KEYB_FR}   { DelphineOS is made by french guys !!!    :-) }

{$IFDEF KEYB_US}

 normal_map : array[1..128]of char =
  (  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   { 1-10 }
     #0,  #0,  #0,  #8,  #0, 'q', 'w', 'e', 'r', 't',   { 11-20 }
    'y', 'u', 'i', 'o', 'p',  #0, '$', #10,  #0, 'a',   { 21-30 }
    's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';',  #0,   { 31-40 }
     #0,  #0, '*', 'z', 'x', 'c', 'v', 'b', 'n', 'm',   { 41-50 }
    ';', ':', '!',  #0,  #0,  #0, ' ',  #0,  #0,  #0,   { 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   { 61-70 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   { 71-80 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   { 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0,  #0,  #0,  #0,  { 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   { 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   { 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		{ 121-128 }

 shift_map : array[1..128]of char =
  (  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 1-10 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,        	{ 11-20 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #10,  #0,  #0,          { 21-30 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 31-40 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 41-50 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,     	{ 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 61-70 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   	{ 71-80 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0, #0,  #0,  #0,     	{ 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		   	{ 121-128 }

 alt_map : array[1..128]of char =
  (  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 1-10 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,        	{ 11-20 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #10,  #0,  #0,          { 21-30 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 31-40 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 41-50 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,     	{ 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 61-70 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   	{ 71-80 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0, #0,  #0,  #0,     	{ 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		   	{ 121-128 }

 altgr_map : array[1..128]of char =
  (  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 1-10 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,        	{ 11-20 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #10,  #0,  #0,          { 21-30 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 31-40 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 41-50 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,     	{ 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 61-70 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,   	{ 71-80 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0, #0,  #0,  #0,     	{ 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		   	{ 121-128 }

{$ELSE}

{$IFDEF KEYB_FR}

 normal_map : array[1..128]of char =
  (  #0, '&', #130, '"', #39, '(', '-', #138, '_', #135, { 1-10 }
     #133, ')', '=', #8, #0, 'a', 'z', 'e', 'r', 't',    { 11-20 }
    'y', 'u', 'i', 'o', 'p', #0, '$', #10, #0, 'q',      { 21-30 }
    's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', #151,   { 31-40 }
    #253,  #0, '*', 'w', 'x', 'c', 'v', 'b', 'n', ',',   { 41-50 }
    ';', ':', '!', #0, '*', #0, ' ', #0, #0, #0,     	 { 51-60 }
     #0, #0, #0, #0, #0, #0, #0, #0, #0, #0,      	 { 61-70 }
     '7', '8', '9', '-', '4', '5', '6', '+', '1', '2', 	 { 71-80 }
     '3', '0', '.', #0, #0, '<', #0, #0, #0, #0,  	 { 81-90 }
     #0, #0, #0, #0, #0, #10, #0, '/', #0, #0,     	 { 91-100 }
     #0, #0, #0, #0, #0, #0, #0, #0, #0, #0,      	 { 101-110 }
     #0, #0, #0, #0, #0, #0, #0, #0, #0, #0,      	 { 111-120 }
     #0, #0, #0, #0, #0, #0, #0, #0);		   	 { 121-128 }

 shift_map : array[1..128]of char =
  (  #0,  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  { 1-10 }
    '0',  #248,  '+',  #8,  #0,  'A',  'Z',  'E',  'R',  'T',   { 11-20 }
    'Y',  'U',  'I',  'O',  'P',  #94,  #0,  #10,  #0,  'Q',    { 21-30 }
    'S',  'D',  'F',  'G',  'H',  'J',  'K',  'L',  'M',  '%',  { 31-40 }
     #0,  #0,  #0,  'W',  'X',  'C',  'V',  'B',  'N',  '?',    { 41-50 }
    '.',  '/',  #21,  #0,  '*',  #0,  #0,  #0,  #0,  #0,     	{ 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 61-70 }
     #0,  #0,  #0,  '-',  #0,  #0,  #0,  '+',  #0,  #0,   	{ 71-80 }
     #0,  #0,  #0,  #0,  #0,  '>',  #0,  #0,  #0,  #0,  	{ 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0,  '/',  #0,  #0,     	{ 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		   	{ 121-128 }

 alt_map : array[1..128]of char =
  (  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 1-10 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,        	{ 11-20 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #10,  #0,  #0,          { 21-30 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 31-40 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 41-50 }
     #0,  #0,  #0,  #0,  '*',  #0,  #0,  #0,  #0,  #0,     	{ 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 61-70 }
     #0,  #0,  #0,  '-',  #0,  #0,  #0,  '+',  #0,  #0,   	{ 71-80 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0,  '/',  #0,  #0,     	{ 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		   	{ 121-128 }

 altgr_map : array[1..128]of char =
  (  #0,  #0,  '~',  '#',  #123,  '[',  '|',  '`',  '\',  '^',	{ 1-10 }
     '@',  ']',  '}',  #0,  #0,  #0,  #0,  #0,  #0,  #0,       	{ 11-20 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #10,  #0,  #0,          { 21-30 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 31-40 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 41-50 }
     #0,  #0,  #0,  #0,  '*',  #0,  #0,  #0,  #0,  #0,     	{ 51-60 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 61-70 }
     #0,  #0,  #0,  '-',  #0,  #0,  #0,  '+',  #0,  #0,  	{ 71-80 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  		{ 81-90 }
     #0,  #0,  #0,  #0,  #0,  #10,  #0,  '/',  #0,  #0,     	{ 91-100 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 101-110 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0,      	{ 111-120 }
     #0,  #0,  #0,  #0,  #0,  #0,  #0,  #0);		   	{ 121-128 }

{$ELSE}

{$ERROR No keyboard map defined in keyboard.inc}

{$ENDIF}   { KEYB_FR }
{$ENDIF}   { KEYB_US }

